~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

${project.name}

  The JPacktool Maven Plugin is intended to create {{{http://openjdk.java.net/jeps/220}Modular Java Run-Time Images}}
  via {{{http://openjdk.java.net/jeps/282}jlink}} 
  or native installable packages via {{{http://openjdk.java.net/jeps/343}jpackage}} 
    
  The JPacktool Maven Plugin extends the Agilhard-OSS
  {{{https://github.com/agilhard-oss/jlink-jpackager-maven-plugin}jlink-jpackager-maven-plugin}}
  and is using it as a Java Library.

  This in turn is based on the Apache {{{https://github.com/apache/maven-jlink-plugin}maven-jlink-plugin}}.


* Maven Packaging types

  The JPacktool plugin provides the following maven packaging types:
  
  jlink, jpackager, jpacktool-jlink, jpacktool-jpackager, jpacktool-jlink,
  jpacktool-generic, jpacktool-bootstrap, jpacktool-business
  

* Goals Overview

  The JPacktool Maven Plugin has nine goals:

  * {{{./help-mojo.html}jpacktool:help}} displays help information on maven-jlink-plugin.

  * {{{./jlink-mojo.html}jpacktool:jlink}} create a Java Run Time Image from <<jar>>/<<jmod>> files.

  * {{{./jpackager-mojo.html}jpacktool:jpackager}} create a native installer package with the <<jpackage>> tool.

  * {{{./jpacktool-prepare-mojo.html"}jpacktool:jpacktool-prepare}} Prepare execution of the jlink and jpackager goals by analyzing java module dependencies and copying files from maven dependecies.

  * {{{./jpacktool-generate-jlink-mojo.html}jpacktool:jpacktool-generate-jlink}} Generate pom for packaging a project using a Bootstrap and a Business Application and use JLink as the final step.

  * {{{./jpacktool-generate-jpackage-mojo.html}jpacktool:jpacktool-generate-jpackage}} Generate pom for packaging a project using a Bootstrap and a Business Application and use JPackage as the final step - not yet implemented.

  * {{{jpacktool-invoke-pom-mojo.html}jpacktool:jpacktool-invoke-pom}} Invoke clean install on generated pom.

  * {{{jpacktool-pack-bootstrap-mojo.html}jpacktool:jpacktool-pack-bootstrap}} Package a Bootstrap Application which can start a Business Application.

  * {{{./jpacktool-pack-business-mojo.html}jpacktool:jpacktool-pack-business}} Package a Business Application started from a Bootstrap Application.

  []

* Usage

  General instructions on how to use the JPacktool Plugin can be found on the {{{./usage.html}usage page}}. 

  Some more specific use cases are described in the examples given below.

  Usually you will use the Maven JPacktool Maven Plugin to create
  a Run Time Image or an installable Package from one or more modules within 
  a multi module build.

  You will than use one submodule there with a pom.xml which uses one of the 
  special Maven packaging types the plugin provides and a configuration for the plugin.

  In other words it is not possible to create a Run Time Image or Installation Package
  from a single Maven Project within the same single Maven Project and you usually would not call
  the goals of the plugin by using a plugin execution configuration.


* Examples

  ... to be done ...


